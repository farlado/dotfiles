#+title: Farlado's Illiterate Dotfiles for ~twm~
#+subtitle: A far-from-sane literate dotfiles configuration
#+author: Farlado
#+startup: hideblocks
#+language: en
#+options: num:nil toc:1

* Table of Contents :toc:quote:
#+BEGIN_QUOTE
- [[#about-this-configuration][About this configuration]]
  - [[#benefits][Benefits]]
  - [[#limitations][Limitations]]
  - [[#about-this-branch][About this branch]]
  - [[#installation][Installation]]
  - [[#license][License]]
- [[#on-tangle][On tangle]]
  - [[#making-the-proper-paths][Making the proper paths]]
  - [[#tangling-absolute-paths][Tangling absolute paths]]
- [[#shell][Shell]]
  - [[#quiet-login-homehushlogin][Quiet login (=$HOME/.hushlogin=)]]
  - [[#on-login-homezprofile][On login (=$HOME/.zprofile=)]]
  - [[#configuration-homezshrc][Configuration (=$HOME/.zshrc=)]]
- [[#x-session][X session]]
  - [[#starting-x-x11xinitrc][Starting X (=X11/xinitrc=)]]
  - [[#configuring-twm-twmtwmrc][Configuring ~twm~ (=twm/twmrc=)]]
  - [[#icons-in-twm-twmbitmaps][Icons in ~twm~ (=twm/bitmaps=)]]
  - [[#status-bar-for-twm-conkyconkyrc][Status bar for ~twm~ (=conky/conkyrc=)]]
  - [[#configuring-rofi-roficonfigrasi][Configuring ~rofi~ (=rofi/config.rasi=)]]
  - [[#configuring-urxvt-x11xresources][Configuring ~urxvt~ (=X11/xresources=)]]
  - [[#gtk2-appearance-gtk-20gtkrc][GTK2 Appearance (=gtk-2.0/gtkrc=)]]
  - [[#gtk3-appearance-gtk-30settingsini][GTK3 appearance (=gtk-3.0/settings.ini=)]]
- [[#music-player-mpdmpdconf][Music player (=mpd/mpd.conf=)]]
- [[#web-browser-firefox][Web browser (Firefox)]]
  - [[#disabling-tabs-chromeuserchromecss][Disabling tabs (=chrome/userChrome.css=)]]
  - [[#respecting-additional-settings-userjs][Respecting additional settings (=user.js=)]]
  - [[#ad-blocker-configuration-adblocktxt][Ad blocker configuration (=adblock.txt=)]]
#+END_QUOTE

* About this configuration
This is an attempt at a literate dotfiles configuration. Originally my dotfiles repository was a massive mess of multiple files strewn across multiple directories. Inspired by the success that is [[https://github.com/farlado/dotemacs/][my Emacs configuration]] and the XDG Base Directory Specification, I decided to start condensing my dotfiles into a single ~org-mode~ file tangled into files centered mostly around =$XDG_CONFIG_HOME=, albeit with incredibly mixed results.

** Benefits
Dotfiles management is done almost /exclusively/ from within =$XDG_CONFIG_HOME= so I now my git repository doesn't sit bare. This means I don't need to use that dumb alias I had anymore. /Emacs dotfiles management, baby./ It also means all my config files are kept in a single place, which means I don't have to dig everywhere for whatever is the matter.

** Limitations
This repository is still very much a hybrid of literate files and files that very much are not literate. However, it should be possible, so long as these files are placed into the right directories, to end up with a working desktop environment. I also do a lot of system configuration, but it's done in a [[file:literate-sysconfig.org][different file]].

** About this branch
Because of the fact I am starting to maintain multiple rices, I now place each one in its own unique repository. The one I use daily will remain the master branch, but other branches will be created as I give multiple desktop environments and window managers their chances to impress me. This branch in particular is for ~twm~, the /standard/ window manager for X11. It seems rather barebones at first, and certainly looks like an eyesore at a glance, but provides a surprising amount of power and customization.

** Installation
1. Clone the repository into its own directory (I personally use =$HOME/.config/dotfiles=)
2. Run the deploy script within

From a command line, this should look like:
#+begin_src sh
  $ git clone https://github.com/farlado/dotfiles $HOME/.config/dotfiles
  $ $HOME/.config/dotfiles/deploy.sh
#+end_src

** License
Because I +am a lazy piece of shit who doesn't like long licenses+ do not think much harm could come from using a pushover license for dotfiles, I am publishing this literate Emacs configuration under the WTFPL.
#+begin_src text :tangle (user-config-file "LICENSE")
  DO WHAT THE FUCK YOU WANT TO PUBLIC LICENSE
  Version 2, December 2004

  Copyright (c) 2019-20 Farlado

  Everyone is permitted to copy and distribute verbatim or modified
  copies of this license document, and changing it is allowed as long
  as the name is changed.

             DO WHAT THE FUCK YOU WANT TO PUBLIC LICENSE
    TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION

   0. You just DO WHAT THE FUCK YOU WANT TO.
#+end_src

* On tangle
** Making the proper paths
In order for tangling to work, the proper paths have to be present. This is done with a hidden block that tangles to a temporary file out in the middle of nowhere. In order to do configurations to Firefox, an additional block is used to run it for a short time to generate profiles.
#+name: mkdir
#+begin_src emacs-lisp
  (dolist (directory '(".cache/zsh"
                       ".config/mpd"
                       ".config/rofi"
                       ".config/conky"
                       ".config/gtk-2.0"
                       ".config/gtk-3.0"
                       ".local/share/zsh"
                       ".config/twm/bitmaps"))
    (make-directory (expand-file-name directory (getenv "HOME")) t))

  (shell-command "sleep 2 && killall firefox & firefox")
  (make-directory (expand-file-name
                   "chrome"
                   (car (file-expand-wildcards
                         (concat (getenv "HOME")
                                 "/.mozilla/firefox/*.default-release"))))
                  t)
  (setenv "FFDIR" (car (file-expand-wildcards
                        (concat (getenv "HOME")
                                "/.mozilla/firefox/*.default-release"))))
#+end_src
#+begin_src text :tangle /tmp/dots :noweb yes :exports none
  <<mkdir()>>
#+end_src

** Tangling absolute paths
There are some fields which require absolute paths. This means I have to use some ~noweb~ referencing to get my proper absolute paths. I define all of these references here.

*** =$HOME=
#+name: HOME
#+begin_src emacs-lisp
  (getenv "HOME")
#+end_src

*** =$XDG_CONFIG_HOME=
#+name: XDG_CONFIG_HOME
#+begin_src emacs-lisp
  (getenv "XDG_CONFIG_HOME")
#+end_src

* Shell
** Quiet login (=$HOME/.hushlogin=)
   :properties:
   :header-args: :tangle (user-home-file ".hushlogin")
   :end:
I don't need to know the last time I logged in, I'd rather the login process be as quiet as possible. This file needs no actual contents, so the block that makes the file is not exported.
#+begin_src :exports none
#+end_src

** On login (=$HOME/.zprofile=)
   :properties:
   :header-args: :tangle (user-home-file ".zprofile")
   :end:
The ~.zprofile~ file is sourced before ~.zshrc~ and is kept slim so that whatever kind of session is meant to load is loaded as fast as possible.

*** Respect XDG Base Directory Specification
The XDG Base Directory Specification is meant to define where to store configurations, caches, and data for the user. Even /Emacs/ respects this by default now. It cleans up the home directory considerably, but also introduces a cooler side effect: it makes portability a lot easier.
#+begin_src sh
  export XDG_DATA_HOME="$HOME/.local/share"
  export XDG_CONFIG_HOME="$HOME/.config"
  export XDG_BIN_HOME="$HOME/.local/bin"
  export XDG_LIB_HOME="$HOME/.local/lib"
  export XDG_CACHE_HOME="$HOME/.cache"

  export GNUPGHOME="$XDG_CONFIG_HOME/gnupg"
  export ICEAUTHORITY="$XDG_CONFIG_HOME/ICEauthority"
#+end_src

*** Find an Emacs dump image if exists
Recently I have started to experiment with using a portable dumper image to load Emacs faster. If one exists, I want to load it.
#+begin_src sh
  if [[ -f $XDG_CONFIG_HOME/emacs/emacs.pdmp ]]; then
      export _EMACS_DUMP_FILE="--dump-file=$XDG_CONFIG_HOME/emacs/emacs.pdmp"
  fi
#+end_src

*** Set default programs
The default editor should be ~emacsclient~, as should ~$VISUAL~. Firefox is my browser.
#+begin_src sh
  export EDITOR=emacsclient
  export VISUAL=emacsclient
  export BROWSER=firefox
#+end_src

*** Login behavior
On =tty1=, start X. Otherwise, just move on to the shell.
#+begin_src sh
  case $(tty | sed 's/\/dev\/tty//') in
      1) exec startx $XDG_CONFIG_HOME/X11/xinitrc &> /dev/null;;
  esac
#+end_src

** Configuration (=$HOME/.zshrc=)
   :properties:
   :header-args: :tangle (expand-file-name ".zshrc" (getenv "HOME"))
   :end:
I have come to appreciate what ~zsh~ has to offer, namely its completions and ease of customization.

*** Aliases
**** File management
- Copying should be interactive
- Displaying file sizes should be human-readable
- Displaying disk usage should be human-readable
- Punish misspelling =ls=
- Listing directory contents should be colorful
- Listing all directory contents should be its own command
- Listing directory contents as a list should be its own command
- Listing all directory contents as a list should be its own command
#+begin_src sh
  alias cp="cp -i"
  alias du="du -h"
  alias df="df -h"
  alias sl="sl -lF"
  alias ls="ls -h --color=always --group-directories-first"
  alias lsa="ls -ah --color=always --group-directories-first"
  alias lsl="ls -lh --color=always --group-directories-first"
  alias lsal="ls -lah --color=always --group-directories-first"
#+end_src

**** System management
- Getting to the Bluetooth control shell should be easy
- Showing free memory should be human-readable
- Doing git commands for dotfiles should be easy
#+begin_src sh
  alias bt="bluetoothctl"
  alias free="free -mh"
#+end_src

*** Completions
**** Automatically configured
This was automagically generated the first time I used ~zsh~, and the only time it has needed a change is to store ~zcompdump~ in a more XDG compliant place.
#+begin_src sh
  zstyle ':completion:*' completer _list _complete _match _correct _approximate _prefix
  zstyle ':completion:*' completions 1
  zstyle ':completion:*' condition 0
  zstyle ':completion:*' expand prefix suffix
  zstyle ':completion:*' file-sort name
  zstyle ':completion:*' format '%d'
  zstyle ':completion:*' group-name ''
  zstyle ':completion:*' ignore-parents parent pwd directory
  zstyle ':completion:*' insert-unambiguous true
  zstyle ':completion:*' list-colors ${(s.:.)LS_COLORS}
  zstyle ':completion:*' list-prompt '%SAt %p: Hit TAB for more, or the character to insert%s'
  zstyle ':completion:*' list-suffixes true
  zstyle ':completion:*' matcher-list '' 'm:{[:lower:]}={[:upper:]}' 'm:{[:lower:][:upper:]}={[:upper:][:lower:]}' 'r:|[._-]=** r:|=**'
  zstyle ':completion:*' max-errors 3
  zstyle ':completion:*' menu select=5
  zstyle ':completion:*' original true
  zstyle ':completion:*' preserve-prefix '//[^/]##/'
  zstyle ':completion:*' prompt '%e possible errors'
  zstyle ':completion:*' select-prompt '%SScrolling active: current selection at %p%s'
  zstyle ':completion:*' squeeze-slashes true
  zstyle ':completion:*' substitute 1
  zstyle ':completion:*' verbose false
  zstyle ':completion:*' word true
  zstyle :compinstall filename "$HOME/.zshrc"

  autoload -Uz compinit colors zcalc
  compinit -d $XDG_CACHE_HOME/zsh/zcompdump-$ZSH_VERSION
  colors
#+end_src

**** Additional options
Some other settings I like to keep enabled:
- Command spelling correction (=correct=)
- Case-insensitive globbing (=nocaseglob=)
- Smart parameter expansion (=rcexpandparam=)
- Numeric glob sorting (=numbericglobsort=)
- Parameter expansion in the prompt (=prompt_subst=)
#+begin_src sh
  setopt correct
  setopt nocaseglob
  setopt rcexpandparam
  setopt numericglobsort
  setopt prompt_subst
#+end_src

*** History file
I like keeping a history file, just in case I need to look up a command I ran in the past. It's stored in a place where it keeps XDG compliance. for safe keeping. Append to history instead of overwriting (=appendhistory=), removing all duplicates (=histignorealldups=).
#+begin_src sh
  HISTFILE=$XDG_DATA_HOME/zsh/history
  HISTSIZE=1000
  SAVEHIST=2000
  setopt appendhistory
  setopt histignorealldups
#+end_src

*** Key bindings
For some reason, by default ~zsh~ doesn't have keys properly set up. For this reason, I need to define some keys and what they do, and assign Emacs key behavior.
#+begin_src sh
  bindkey -e
  bindkey "\e[1~" beginning-of-line
  bindkey "\e[4~" end-of-line
  bindkey "\e[5~" beginning-of-history
  bindkey "\e[6~" end-of-history
  bindkey "\e[3~" delete-char
  bindkey "\e[2~" quoted-insert
  bindkey "\e[5C" forward-word
  bindkey "\eOc" emacs-forward-word
  bindkey "\e[5D" backward-word
  bindkey "\eOd" emacs-backward-word
  bindkey "\e[1;5C" forward-word
  bindkey "\e[1;5D" backward-word
  bindkey "^H" backward-delete-word
  # for rxvt
  bindkey "\e[8~" end-of-line
  bindkey "\e[7~" beginning-of-line
  # for non RH/Debian xterm, can't hurt for RH/DEbian xterm
  bindkey "\eOH" beginning-of-line
  bindkey "\eOF" end-of-line
  # for freebsd console
  bindkey "\e[H" beginning-of-line
  bindkey "\e[F" end-of-line
#+end_src

*** Setting the prompt
It's a dumb fancy-looking prompt. That's about all there is to say about it. What follows afterward is how git status is added to the prompt.
#+begin_src sh
  export PS1=$'%(?.%{\033[0;34m%}.\033[0;31m%})┌%{\033[1;32m%}%n%{\033[0;37m%}%b@%{\033[1;31m%}%m%{\033[1;34m%}[%{\033[1;35m%}%c%{\033[1;34m%}]$(git_prompt_string)%{$fg_bold[red]%}%(?..[%b%{$fg[red]%}%?%{$fg_bold[red]%}])\n%(?.%{\033[0;34m%}.%{\033[0;31m%})└%{\033[0m%}%(!.#.$) '
#+end_src

*** Git status in the prompt
When managing git repositories, I want extra information in the prompt. I genuinely forget where I found this snippet, but it's of much use.

**** Assigning symbols and colors
This block assigns, respectively:
- The symbol to open a block with git information
- The symbol to close a block with git information
- The symbol to divide blocks with git information
- The symbol for the number of commits ahead
- The symbol for the number of commits behind
- The symbol for merge conflicts
- The symbol for untracked files
- The symbol for modified tracked files
- The symbol for staged changes present
#+begin_src sh
  GIT_PROMPT_PREFIX="%{$fg_bold[blue]%}[%{$reset_color%}"
  GIT_PROMPT_SUFFIX="%{$fg_bold[blue]%}]%{$reset_color%}"
  GIT_PROMPT_SYMBOL="%{$fg_bold[blue]%}="
  GIT_PROMPT_AHEAD="%{$fg[cyan]%}+NUM%{$reset_color%}"
  GIT_PROMPT_BEHIND="%{$fg[red]%}-NUM%{$reset_color%}"
  GIT_PROMPT_MERGING="%{$fg_bold[magenta]%}!%{$reset_color%}"
  GIT_PROMPT_UNTRACKED="%{$fg_bold[red]%}?%{$reset_color%}"
  GIT_PROMPT_MODIFIED="%{$fg_bold[yellow]%}?%{$reset_color%}"
  GIT_PROMPT_STAGED="%{$fg_bold[green]%}+%{$reset_color%}"
#+end_src

**** Parse the current git branch
Get the current branch or the name-rev if on a detached head.
#+begin_src sh
  parse_git_branch() {
      ( git symbolic-ref -q HEAD || git name-rev --name-only --no-undefined --always HEAD ) 2> /dev/null
  }
#+end_src

**** Parse the current git state
This is where the actual state of the git repository is determined, and returned as a string.
#+begin_src sh
  parse_git_state() {
      # Show different symbols as appropriate for various Git repository states
      # Compose this value via multiple conditional appends.
      local GIT_STATE=""
      local NUM_AHEAD="$(git log --oneline @{u}.. 2> /dev/null | wc -l | tr -d ' ')"
      if [ "$NUM_AHEAD" -gt 0 ]; then
          GIT_STATE=$GIT_STATE${GIT_PROMPT_AHEAD//NUM/$NUM_AHEAD}
      fi
      local NUM_BEHIND="$(git log --oneline ..@{u} 2> /dev/null | wc -l | tr -d ' ')"
      if [ "$NUM_BEHIND" -gt 0 ]; then
          GIT_STATE=$GIT_STATE${GIT_PROMPT_BEHIND//NUM/$NUM_BEHIND}
      fi
      local GIT_DIR="$(git rev-parse --git-dir 2> /dev/null)"
      if [ -n $GIT_DIR ] && test -r $GIT_DIR/MERGE_HEAD; then
          GIT_STATE=$GIT_STATE$GIT_PROMPT_MERGING
      fi
      if [[ -n $(git ls-files --other --exclude-standard 2> /dev/null) ]]; then
          GIT_STATE=$GIT_STATE$GIT_PROMPT_UNTRACKED
      fi
      if ! git diff --quiet 2> /dev/null; then
          GIT_STATE=$GIT_STATE$GIT_PROMPT_MODIFIED
      fi
      if ! git diff --cached --quiet 2> /dev/null; then
          GIT_STATE=$GIT_STATE$GIT_PROMPT_STAGED
      fi
      if [[ -n $GIT_STATE ]]; then
          echo "$GIT_PROMPT_PREFIX$GIT_STATE$GIT_PROMPT_SUFFIX"
      fi
  }
#+end_src

**** Return a string for the prompt
Finally, if when writing the prompt a git branch is found, return a string with the git state and git branch.
#+begin_src sh
  git_prompt_string() {
      local git_where="$(parse_git_branch)"
      [ -n "$git_where" ] && echo "$GIT_PROMPT_SYMBOL$(parse_git_state)$GIT_PROMPT_PREFIX%{$fg[magenta]%}${git_where#(refs/heads/|tags/)}$GIT_PROMPT_SUFFIX"
  }
#+end_src

*** When Emacs is the terminal
There is an Emacs package called ~vterm~ which allows use of Emacs as a fully-featured terminal emulator. There are a number of features which require configuration in the shell.
#+begin_src sh
  if [ "$INSIDE_EMACS" = "vterm" ]; then
#+end_src

**** Push Emacs commands from ~vterm~
This allows me to clear scrollback easily.
#+begin_src sh
  function vterm_printf(){
      if [ -n "$TMUX" ]; then
          printf "\ePtmux;\e\e]%s\007\e\\" "$1"
      elif [ "${TERM%%-*}" = "screen" ]; then
          # GNU screen (screen, screen-256color, screen-256color-bce)
          printf "\eP\e]%s\007\e\\" "$1"
      else
          printf "\e]%s\e\\" "$1"
      fi
  }
#+end_src

**** Clear all scrollback when clearing
This is why we enable pushing Emacs commands from ~vterm~.
#+begin_src sh
  alias clear='vterm_printf "51;Evterm-clear-scrollback";tput clear'
#+end_src

**** "Alias" ~vim~ into ~emacsclient~
I can't get over old muscle memory, even after months of using Emacs. Typing ~vim~ in the terminal to edit files is only natural, so I set up a proper function to call ~emacsclient~ when I type ~vim~.
#+begin_src sh
  function vim() {
      [ "$@" ] && {
          emacsclient $@
      } || {
          echo "Please give an argument or filename."
          return 1
      }
  }
#+end_src

With all this now configured, we can close the if block.
#+begin_src sh
  fi
#+end_src

*** Syntax highlighting in the shell
It's subtle, but it makes a world of difference in knowing whether I am entering a command properly.
#+begin_src sh
  source $XDG_CONFIG_HOME/zsh/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh
  ZSH_HIGHLIGHT_HIGHLIGHTERS=(main root regexp brackets pattern)
#+end_src

*** Tangling a literate ~org-mode~ file
This is necessary for multiple reasons, but most notably so for tangling this specific file. I need to define a few macros and load ~org~ before I can tangle, though. We also skip all confirmation for evaluating. I also set up one for doing things with superuser privileges.
#+begin_src sh
  function orgtangle() {
      [[ ! -n $XDG_CONFIG_HOME ]] && export XDG_CONFIG_HOME="$HOME/.config"
      emacs --batch \
            --eval "(require 'org)" \
            --eval "(setq org-confirm-babel-evaluate nil)" \
            --eval "(defmacro user-emacs-file (file)
                      (expand-file-name file user-emacs-directory))" \
            --eval "(defmacro user-home-file (file)
                      (expand-file-name file (getenv \"HOME\")))" \
            --eval "(defmacro user-config-file (file)
                      (expand-file-name file (getenv \"XDG_CONFIG_HOME\")))" \
            --eval "(org-babel-tangle-file \"$1\")"
  }

  function orgtanglesudo() {
      sudo emacs --batch \
                 --eval "(require 'org)" \
                 --eval "(setq org-confirm-babel-evaluate nil)" \
                 --eval "(defmacro user-emacs-file (file)
                           (expand-file-name file user-emacs-directory))" \
                 --eval "(defmacro user-home-file (file)
                           (expand-file-name file (getenv \"HOME\")))" \
                 --eval "(defmacro user-config-file (file)
                           (expand-file-name file (getenv \"XDG_CONFIG_HOME\")))" \
                 --eval "(org-babel-tangle-file \"$1\")"
  }
#+end_src

*** Show a fetch on startup
This is just a point of personal aesthetic preference. I like having some kind of little display pop up when I start a terminal.
#+begin_src sh
  ufetch
#+end_src

* X session
** Starting X (=X11/xinitrc=)
   :properties:
   :header-args: :tangle (user-config-file "X11/xinitrc")
   :end:
*** Force 1080p on my W541
Because I limit the resolution to 1080p but my W541 wants to display 3K, I need to force it. The displays I dock to also need configuration.
#+begin_src sh
  xrandr | grep 'DP2-1 connected' 1> /dev/null 2>/dev/null && {
      xrandr --output eDP1 --off \
             --output DP2-1 --mode 1920x1080 --rotate left --pos 0x0 \
             --output DP2-2 --primary --rate 75 --mode 1920x1080 --pos 1080x0 \
             --output DP2-3 --mode 1920x1080 --rotate right --pos 3000x0
  } || {
      xrandr --output eDP1 --primary --mode 1920x1080 --pos 0x0 \
             --output DP2-1 --off \
             --output DP2-2 --off \
             --output DP2-3 --off
  }
#+end_src

*** Manage mouse and keyboard
I don't really use the trackpad, so there's no point in keeping it enabled. I also need to configure my trackball. Lastly, turn caps lock into another control key.
#+begin_src sh
  xinput disable $(xinput | grep Synap | head -n 1 | sed -r 's/.*id=([0-9]+).*/\1/')

  tb=$(xinput | grep ELECOM | head -n 1 | sed -r 's/.*id=([0-9]+).*/\1/')
  xinput set-prop $tb 'libinput Button Scrolling Button' 10
  xinput set-prop $tb 'libinput Scroll Method Enabled' 0 0 1
  xinput set-button-map $tb 1 2 3 4 5 6 7 8 9 2 1 2

  setxkbmap us -option ctrl:nocaps
#+end_src

*** Start a compositor
I don't need it for too much, it just makes things a little nicer.
#+begin_src sh
  xcompmgr -f -D 5 &
#+end_src

*** Qt/GTK uniformity
This annoyed me. Thankfully there's a fix to it.
#+begin_src sh
  export QT_QPA_PLATFORMTHEME=gtk2
#+end_src

*** XDG Compliance
Currently only GTK2 is here, but as I keep on working on it I'll eventually get to a dotfiles setup that has as few configuration files outside of =$XDG_CONFIG_HOME= as possible.
#+begin_src sh
  export WM="twm"
  export GTK2_RC_FILES="$XDG_CONFIG_HOME/gtk-2.0/gtkrc"
#+end_src

*** Set wallpaper
I'm not entirely tacky.
#+begin_src sh
  if [ -f $XDG_CONFIG_HOME/.wallpaper.png ]; then
      feh --no-fehbg --bg-fill $XDG_CONFIG_HOME/.wallpaper.png
  fi
#+end_src

*** X resources
I source =$XDG_CONIFG_HOME/X11/xresources= for configuration of ~urxvt~, my terminal of choice.
#+begin_src sh
  xrdb -merge $XDG_CONFIG_HOME/X11/xresources
#+end_src

*** Fix cursor
An annoyance that it doesn't look correct right away...
#+begin_src sh
  xsetroot -cursor_name left_ptr
#+end_src

*** Status bar
Since ~twm~ doesn't come with any kind of status indicators, I need to make one for myself and it's started here, placed right above my icon manager. Incidentally, this makes the top right corner bear some resemblance to the BeOS Tracker.
#+begin_src sh
  conky
#+end_src

*** Start ~twm~
#+begin_src sh
  exec twm -f $XDG_CONFIG_HOME/twm/twmrc
#+end_src

** Configuring ~twm~ (=twm/twmrc=)
   :properties:
   :header-args: :tangle (user-config-file "twm/twmrc")
   :end:
I decided for funsies to start my own ~twm~ configuration. Honestly I kinda like this window manager, even if I can't really "live" in it.

*** Font
The default font looks okay, but.......
#+begin_src conf-space :noweb yes
  MenuFont "*gohu*14*"
  IconFont "*gohu*14*"
  TitleFont "*gohu*14*"
  ResizeFont "*gohu*14*"
  IconManagerFont "*gohu*14*"
#+end_src

*** System
**** Settings
- Don't use defaults
- Don't let windows move off the screen
- Don't grab the server on menus
- Decorate "transient" windows
- Ignore extraneous events
#+begin_src conf-space
  NoDefaults
  DontMoveOff
  NoGrabServer
  DecorateTransients
  DefaultFunction f.nop
#+end_src

**** Functions
Movement-based actions are defined here.
- Immediately allow movement of a window.
- Raise/lower/iconify when moving.
- Lower when resizing.
- Deiconify and raise.
#+begin_src conf-space
  MoveDelta 1
  Function "move-or-raise"       { f.move f.deltastop f.raise }
  Function "move-or-lower"       { f.move f.deltastop f.lower }
  Function "move-or-iconify"     { f.move f.deltastop f.iconify }

  Function "resize-or-lower"     { f.resize f.deltastop f.lower }

  Function "deiconify-and-raise" { f.deiconify f.raise }
#+end_src

*** Windows
**** General
- Move/resize windows, not just outlines.
- Repaint instead of saving window state.
- Don't raise on resize/move/deiconify.
- Accept window size hints.
- Allow relative resize from all regions.
#+begin_src conf-space
  OpaqueMove
  OpaqueResize
  NoSaveUnders
  NoRaiseOnMove
  NoRaiseOnResize
  NoRaiseOnDeiconify
  AutoRelativeResize
  UsePPosition "on"
#+end_src

**** Title bars
For some reason, the default ~twm~ title bars are configured in a way that is an /ABSOLUTE EYESORE/. A little bit of the BeOS aesthetic fixes this up right away.
#+begin_src conf-space
  NoTitleHighlight
  SqueezeTitle
#+end_src

**** Title buttons
I personally like having a close button, a maximize button, and a minimize button on every window. Why wouldn't you include those? On the right side is a menu. I don't want them to be smaller, and I don't want them to have borders.
#+begin_src conf-space
  IconDirectory "~/.config/twm/bitmaps"

  LeftTitleButton "close" = f.delete
  LeftTitleButton "maximize" = f.fullzoom
  LeftTitleButton "minimize" = f.iconify
  RightTitleButton "menu" = f.menu "windowmenu"
  ButtonIndent 0
  TitleButtonBorderWidth 0
#+end_src

**** Border settings
These make borders marginally better to look at. We also remove shadows from menus here.
#+begin_src conf-space
  BorderWidth 3
  FramePadding 1
  TitlePadding 3
  MenuBorderWidth 2
#+end_src

**** Windows without a title
These windows should not have a title.
#+begin_src conf-space
  NoTitle {
      "TWM Icon Manager"
      "conky (eternity)"
      "conky (navi)"
  }
#+end_src

*** Icon Manager
Icons are the way windows minimize. There is also an icon manager, which is configured in this section. The icon manager should be present at startup, living in the top right corner of my screen. Icons themselves shouldn't show up, rather windows should be minimized fully. The clock next to it should never show up, and the icon manager itself should automatically rise when it's focused. It also shouldn't move around.
#+begin_src conf-space
  ShowIconManager
  SortIconManager
  NoCaseSensitive
  IconifyByUnmapping
  IconManagerGeometry "=171x10-0+22" 1
  IconManagerDontShow {
      "conky (navi)"
      "conky (eternity)"
      "TWM Icon Manager"
  }
  AutoRaise { "TWM Icon Manager" }
#+end_src

*** Key bindings
- =F11= = Fullscreen toggle
- =Alt= + =Tab= = Warp to Icon Manager
#+begin_src conf-space
  "F11" =   : all : f.fullzoom
  "Tab" = m : all : f.warpto "TWM Icon Manager"
#+end_src

*** Mouse bindings
**** On the icon manager
- =Button1= = =deiconify-and-raise=
- =Button2= = Toggle iconify
- =Button3= = Lower window
#+begin_src conf-space
  Button1 = : iconmgr : f.function "deiconify-and-raise"
  Button2 = : iconmgr : f.iconify
  Button3 = : iconmgr : f.lower
#+end_src

**** On the root window
- =Button1= = =twmops= menu
#+begin_src conf-space
  Button1 = : root : f.menu "twmops"
#+end_src

**** On the titlebar
- =Button1= = =move-or-raise=
- =Button2= = =move-or-iconify=
- =Button3= = =move-or-lower=
#+begin_src conf-space
  Button1 = : title | icon : f.function "move-or-raise"
  Button2 = : title | icon : f.function "move-or-iconify"
  Button3 = : title | icon : f.function "move-or-lower"
#+end_src

**** On a window
- =Button1= + =Alt= = =move-or-raise=
- =Button2= + =Alt= = =move-or-iconify=
- =Button3= + =Alt= = =resize-or-lower=
#+begin_src conf-space
  Button1 = m : window | icon : f.function "move-or-raise"
  Button2 = m : window | icon : f.function "move-or-iconify"
  Button3 = m : window | icon : f.function "resize-or-lower"
#+end_src

*** Menu setup
Since ~twm~ seems to rely quite a bit on the mouse, of course it involves menus.

**** =twmops=
This menu is mainly supposed to concern things specifically related to ~twm~ or launching windows. Exiting is put in its own sub-menu.
#+begin_src conf-space
  menu "twmops" {
      "twm" f.title
      "Run..." !"rofi -show run &"
      "" f.nop
      "Discord"  !"discord &"
      "Emacs"    !"emacsclient -c || emacs $_EMACS_DUMP_FILE &"
      "Firefox"  !"firefox --new-window &"
      "Steam"    !"steam &"
      "Telegram" !"telegram-desktop &"
      "Terminal" !"urxvt &"
      "" f.nop
      "Quit" f.menu "quit"
  }

  menu "quit" {
      "Log out"   f.quit
      "Sleep"     !"systemctl suspend -i &"
      "Reboot"    !"restart"
      "Shut down" !"shutdown now"
  }
#+end_src

**** =windowmenu=
This is the menu on every window.
#+begin_src conf-space
  menu "windowmenu" {
      "Identify" f.identify
      "Iconify"  f.iconify
      "Raise"    f.raise
      "Lower"    f.lower
      "Focus"    f.focus
      "" f.nop
      "Close" f.delete
      "Kill"  f.destroy
  }
#+end_src

*** Colors
Out of the box, ~twm~ is /ugly/. I don't want it to stay that way. I like that I am free to give it colors as I will, giving me the ability to provide consistency between my ~twm~ colors and the colors I give Emacs and GTK applications.
#+begin_src conf-space
  Color {
#+end_src

**** Default
This is the default colors for blank windows (or maybe the desktop itself, I really don't know).
#+begin_src conf-space
  DefaultBackground "#282a36"
  DefaultForeground "#FFFFFF"
#+end_src

**** Borders
For the active border, I use the same color as the Emacs mode line color used in Dracula. For the inactive border, I use a blend of the active border color and the official Dracula background.
#+begin_src conf-space
  BorderColor "#44475a"
  BorderTileBackground "#282a36"
  BorderTileForeground "#44475a"
#+end_src

**** Titles
The same color is used for the title bars as for the borders.
#+begin_src conf-space
  TitleBackground "#44475a"
  TitleForeground "#ffffff"
#+end_src

**** Menus
Menus share many of the same colors as other elements.
#+begin_src conf-space
  MenuBorderColor "#44475a"
  MenuShadowColor "#44475a"

  MenuTitleBackground "#44475a"
  MenuTitleForeground "#ffffff"

  MenuBackground "#282a36"
  MenuForeground "#ffffff"
#+end_src

**** Icon Manager
The final section, for the icon manager. It'll all look very familiar.
#+begin_src conf-space
  IconManagerBackground "#282a36"
  IconManagerForeground "#ffffff"
  IconManagerHighlight "#44475a"
#+end_src

With that, we can close the block.
#+begin_src conf-space
  }
#+end_src

** Icons in ~twm~ (=twm/bitmaps=)
Incidentally, X bitmaps are plain text, so they can be tangled instead of needing to be included in my git repository.

*** Menu
#+begin_src text :tangle (user-config-file "twm/bitmaps/menu")
  #define menu12_width 12
  #define menu12_height 12
  static unsigned char menu12_bits[] = {
     0xfe, 0x03, 0x02, 0x02, 0x02, 0x06, 0x72, 0x06, 0x02, 0x06, 0x72, 0x06,
     0x02, 0x06, 0x72, 0x06, 0x02, 0x06, 0x02, 0x06, 0xfe, 0x07, 0xf8, 0x07
  };
#+end_src

*** Close
#+begin_src text :tangle (user-config-file "twm/bitmaps/close")
  #define close_width 7
  #define close_height 7
  static unsigned char close_bits[] = {
    0x41, 0x22, 0x14, 0x08, 0x14, 0x22, 0x41
  };
#+end_src

*** Maximize
#+begin_src text :tangle (user-config-file "twm/bitmaps/maximize")
  #define maximize_width 7
  #define maximize_height 7
  static unsigned char maximize_bits[] = {
    0x7f, 0x7f, 0x41, 0x41, 0x41, 0x41, 0x7f
  };
#+end_src

*** Minimize
#+begin_src text :tangle (user-config-file "twm/bitmaps/minimize")
  #define minimize_width 7
  #define minimize_height 7
  static unsigned char minimize_bits[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0x7f
  };
#+end_src

** Status bar for ~twm~ (=conky/conkyrc=)
   :properties:
   :header-args: :tangle (user-config-file "conky/conky.conf")
   :end:
Since ~twm~ does not come with its own status bar, I need to make one for it.

*** Config
#+begin_src conf
  conky.config = {
#+end_src

**** Font
Use ~xft~ for nicer looking fonts, and make the text as clean as possible.
#+begin_src conf
  use_xft = true,
  font = 'Gohu GohuFont:pixelsize=14',
  draw_outline = false,
  draw_shades = false,
#+end_src

**** Window
The window should not be managed. It will handle itself. Its background is the same color as the borders on windows in ~twm~, since it is supposed to look as though it is attached to the icon manager.
#+begin_src conf
  own_window = true,
  own_window_type = 'override',
  own_window_colour = '44475a',
  default_color = 'white',
  double_buffer = true,
  border_width = 0,
#+end_src

**** Position
Place the status bar at the top right corner, offset just barely to make the borders present.
#+begin_src conf
  alignment = 'top_right',
  gap_x = 2,
  gap_y = 4,
#+end_src

**** Update time
Update the status bar every second, since a seconds counter is included.
#+begin_src conf
  update_interval = 1.0,
#+end_src

**** Fork after load
#+begin_src conf
  background = true,
#+end_src

With that, this block can be closed.
#+begin_src conf
  }
#+end_src

*** Text
- Screen brightness
- Volume percentage
- Battery percentage
- Time and date
#+begin_src conf
  conky.text = [[
  Brightness: ${exec brightnessctl i | grep % | sed -r 's/.*\(([0-9]+%).*/\1/'} | \
  Volume: ${exec amixer get Master | grep Left: | sed -r 's/.*\[(.*%).*/\1/'}\
  ${exec [ "$(amixer get Master | grep off)" ] && echo " (Muted)" } | \
  Battery: ${battery_percent}% | \
  ${time %a %d %b | %H:%M:%S}
  ]]
#+end_src

** Configuring ~rofi~ (=rofi/config.rasi=)
   :properties:
   :header-args: :tangle (user-config-file "rofi/config.rasi")
   :end:
Since there's no real hub for everything that can be run, I need something that can give a prompt for what to run. Because +I don't support Nazi software+ I don't really like Suckless tools, I use ~rofi~ for this.

*** Basic configuration
All I need to set are a font, a width, how many lines of options to show, and a prompt.
#+begin_src conf-colon
  configuration {
      font: "Iosevka 10";
      width: 250;
      lines: 7;
      display-run: "Run: ";
  }
#+end_src

*** Color scheme
It's Dracula, so I don't really need to show it again.
#+begin_src conf-colon :exports none
  // Dracula colors
  ,* {
      background:   rgba ( 40, 42, 54, 100 % );
      current-line: rgba ( 248, 248, 242, 100 % );
      selection:     rgba ( 68, 71, 90, 100 % );
      foreground:   rgba ( 248, 248, 242, 100 % );
      comment:     rgba ( 98, 114, 164, 100 % );
      cyan:     rgba ( 68, 71, 90, 100 % );
      green:     rgba ( 80, 250, 123, 100 % );
      orange:     rgba ( 255, 184, 108, 100 % );
      pink:     rgba ( 255, 121, 198, 100 % );
      purple:     rgba ( 189, 147, 249, 100 % );
      red:     rgba ( 255, 85, 85, 100 % );
      yellow:     rgba ( 241, 250, 140, 100 % );
  }
  ,* {
      selected-normal-background:     @cyan;
      normal-background:              @background;
      normal-foreground:              @foreground;
      alternate-normal-background:    @normal-background;
      alternate-normal-foreground:    @foreground;
      selected-normal-foreground:     @foreground;
      urgent-foreground:              @red;
      urgent-background:              @normal-background;
      alternate-urgent-background:    @urgent-foreground;
      alternate-urgent-foreground:    @urgent-foreground;
      selected-active-foreground:     @foreground;
      selected-urgent-background:     @normal-background;
      alternate-active-background:    @normal-background;
      alternate-active-foreground:    @selected-active-foreground;
      alternate-active-background:    @selected-active-background;
      border-color:                   @selected-normal-background;
      separatorcolor:                 @border-color;
      spacing: 2;
      background-color: @normal-background;
  }
  #window {
      border:           3;
      padding:          9;
  }
  #mainbox {
      background-color: inherit;
      border:  0;
      padding: 0;
  }
  #textbox {
      text-color: @foreground;
  }
  #element {
      border:  0;
      padding: 1px ;
  }
  #element.normal.normal {
      background-color: @normal-background;
      text-color:       @normal-foreground;
  }
  #element.normal.urgent {
      background-color: @urgent-background;
      text-color:       @urgent-foreground;
  }
  #element.normal.active {
      background-color: @active-background;
      text-color:       @active-foreground;
  }
  #element.selected.normal {
      background-color: @selected-normal-background;
      text-color:       @selected-normal-foreground;
  }
  #element.selected.urgent {
      background-color: @selected-urgent-background;
      text-color:       @selected-urgent-foreground;
  }
  #element.selected.active {
      background-color: @selected-active-background;
      text-color:       @selected-active-foreground;
  }
  #element.alternate.normal {
      background-color: @alternate-normal-background;
      text-color:       @alternate-normal-foreground;
  }
  #element.alternate.urgent {
      background-color: @alternate-urgent-background;
      text-color:       @alternate-urgent-foreground;
  }
  #element.alternate.active {
      background-color: @alternate-active-background;
      text-color:       @alternate-active-foreground;
  }
  #scrollbar {
      border:       0;
  }
  #button.selected {
      background-color: @selected-normal-background;
      text-color:       @selected-normal-foreground;
  }
  #inputbar {
      spacing:    0;
      text-color: @normal-foreground;
      background-color: inherit;
      padding:    1px ;
  }
  #case-indicator {
      spacing:    0;
      text-color: @normal-background;
  }
  #entry {
      spacing:    0;
      text-color: @normal-foreground;
  }
  #prompt {
      spacing:    0;
      text-color: @normal-foreground;
  }
#+end_src

** Configuring ~urxvt~ (=X11/xresources=)
   :properties:
   :header-args: :tangle (user-config-file "X11/xresources")
   :end:
Emacs provides me a virtual terminal, but personally I prefer having one that isn't tied to Emacs.

*** Font/Scrollbar
Of course I want to use the same font across all my applications. Also I have no need for a scroll bar.
#+begin_src conf-xdefaults :noweb yes
  URxvt*geometry: 80x24
  URxvt*font: xft:Iosevka:size=10
  URxvt*scrollBar: False
#+end_src

*** Colors
This is basically just Dracula.
#+begin_src conf-xdefaults
  ! Dracula Xresources palette
  URxvt*foreground: #F8F8F2
  URxvt*background: #282a36
  URxvt*color0:     #000000
  URxvt*color8:     #4D4D4D
  URxvt*color1:     #FF5555
  URxvt*color9:     #FF6E67
  URxvt*color2:     #50FA7B
  URxvt*color10:    #5AF78E
  URxvt*color3:     #F1FA8C
  URxvt*color11:    #F4F99D
  URxvt*color4:     #BD93F9
  URxvt*color12:    #CAA9FA
  URxvt*color5:     #FF79C6
  URxvt*color13:    #FF92D0
  URxvt*color6:     #8BE9FD
  URxvt*color14:    #9AEDFE
  URxvt*color7:     #BFBFBF
  URxvt*color15:    #E6E6E6
#+end_src

** GTK2 Appearance (=gtk-2.0/gtkrc=)
   :properties:
   :header-args: :tangle (user-config-file "gtk-2.0/gtkrc")
   :end:
These settings apply the theme, cursor, and icons I prefer, along with other preferred visual settings. Some size values determined [[#tangling-the-right-size-values][above]].
#+begin_src conf-unix :noweb yes
  gtk-theme-name="Ant-Dracula"
  gtk-icon-theme-name="HighContrast"
  gtk-font-name="Iosevka 10"
  gtk-cursor-theme-name="Bibata_Ice"
  gtk-cursor-theme-size=0
  gtk-toolbar-style=GTK_TOOLBAR_BOTH
  gtk-toolbar-icon-size=GTK_ICON_SIZE_SMALL_TOOLBAR
  gtk-button-images=1
  gtk-menu-images=1
  gtk-enable-event-sounds=0
  gtk-enable-input-feedback-sounds=0
  gtk-xft-antialias=1
  gtk-xft-hinting=1
  gtk-xft-hintstyle="hintfull"
  gtk-xft-rgba="rgb"
#+end_src

** GTK3 appearance (=gtk-3.0/settings.ini=)
   :properties:
   :header-args: :tangle (user-config-file "gtk-3.0/settings.ini")
   :end:
This is the exact same settings as seen in [[#gtk2-appearance-gtkrc][GTK2's configuration]], but instead for GTK3. This also includes the size values determined [[#tangling-the-right-size-values][above]].
#+begin_src conf-unix :noweb yes
  [Settings]
  gtk-theme-name=Ant-Dracula
  gtk-icon-theme-name=HighContrast
  gtk-font-name=Iosevka 10
  gtk-cursor-theme-name=Bibata_Ice
  gtk-cursor-theme-size=0
  gtk-toolbar-style=GTK_TOOLBAR_BOTH
  gtk-toolbar-icon-size=GTK_ICON_SIZE_SMALL_TOOLBAR
  gtk-button-images=1
  gtk-menu-images=1
  gtk-enable-event-sounds=0
  gtk-enable-input-feedback-sounds=0
  gtk-xft-antialias=1
  gtk-xft-hinting=1
  gtk-xft-hintstyle=hintfull
  gtk-xft-rgba=rgb
#+end_src

* Music player (=mpd/mpd.conf=)
  :properties:
  :header-args: :tangle (user-config-file "mpd/mpd.conf")
  :end:
I use ~mpd~ simply out of ease of use, since it interfaces well with EMMS on Emacs.

*** Setting proper directories
This section requires absolute paths, which are tangled using ~noweb~ references as defined [[#tangling-absolute-paths][above]].
- Music and playlists should be in =$HOME/Music=
- The database, log file, PID file, and state file should all be in =$XDG_CONFIG_HOME/mpd=
#+begin_src conf-space :noweb yes
  music_directory "<<HOME()>>/Music"
  playlist_directory "<<HOME()>>/Music"
  db_file "<<XDG_CONFIG_HOME()>>/mpd/mpd.db"
  log_file "<<XDG_CONFIG_HOME()>>/mpd/mpd.log"
  pid_file "<<XDG_CONFIG_HOME()>>/mpd/mpd.pid"
  state_file "<<XDG_CONFIG_HOME()>>/mpd/mpdstate"
#+end_src

*** Setting the output interface
I want to use my speakers for this.
#+begin_src conf-space
  audio_output {
          type "pulse"
          name "pulse audio"
  }
#+end_src

*** Use the right address and port
This is a local instance
#+begin_src conf-space
  bind_to_address "127.0.0.1"
  port "6601"
#+end_src

* Web browser (Firefox)
Much human intervention is still required of this part of the configuration:
- Extensions do not automatically install.
- Configuration of the ad blocker is not automatic.
- Some website specific settings cannot be set here.

** Disabling tabs (=chrome/userChrome.css=)
I got used to managing single browser windows thanks to EXWM. I still can't go back to having tabs when surfing the web.
#+begin_src css :tangle (expand-file-name "chrome/userChrome.css" (getenv "FFDIR"))
  #TabsToolbar { visibility: collapse !important; }
#+end_src

** Respecting additional settings (=user.js=)
Since I change a lot of settings, I just spill this verbatim. It's not actually shown because it's not all that special.
#+begin_src js :exports none :tangle (expand-file-name "user.js" (getenv "FFDIR"))
  user_pref("app.shield.optoutstudies.enabled", true);
  user_pref("browser.aboutConfig.showWarning", false);
  user_pref("browser.contentblocking.category", "strict");
  user_pref("browser.ctrlTab.recentlyUsedOrder", false);
  user_pref("browser.laterrun.enabled", true);
  user_pref("browser.link.open_newwindow", 2);
  user_pref("browser.migration.version", 89);
  user_pref("browser.newtabpage.activity-stream.asrouter.userprefs.cfr.addons", false);
  user_pref("browser.newtabpage.activity-stream.asrouter.userprefs.cfr.features", false);
  user_pref("browser.newtabpage.activity-stream.feeds.section.highlights", false);
  user_pref("browser.newtabpage.activity-stream.feeds.section.topstories", false);
  user_pref("browser.newtabpage.activity-stream.feeds.snippets", false);
  user_pref("browser.newtabpage.activity-stream.feeds.topsites", false);
  user_pref("browser.newtabpage.activity-stream.section.highlights.includeBookmarks", false);
  user_pref("browser.newtabpage.activity-stream.section.highlights.includeDownloads", false);
  user_pref("browser.newtabpage.activity-stream.section.highlights.includePocket", false);
  user_pref("browser.newtabpage.activity-stream.section.highlights.includeVisited", false);
  user_pref("browser.newtabpage.activity-stream.showSearch", false);
  user_pref("browser.newtabpage.activity-stream.showSponsored", false);
  user_pref("browser.newtabpage.enabled", false);
  user_pref("browser.search.suggest.enabled", false);
  user_pref("browser.startup.homepage", "about:blank");
  user_pref("browser.uiCustomization.state", "{\"placements\":{\"widget-overflow-fixed-list\":[],\"nav-bar\":[\"back-button\",\"forward-button\",\"stop-reload-button\",\"urlbar-container\",\"downloads-button\"],\"toolbar-menubar\":[\"menubar-items\"],\"TabsToolbar\":[\"tabbrowser-tabs\",\"new-tab-button\",\"alltabs-button\"],\"PersonalToolbar\":[\"personal-bookmarks\"]},\"seen\":[\"developer-button\",\"https-everywhere_eff_org-browser-action\",\"ublock0_raymondhill_net-browser-action\",\"jid1-mnnxcxisbpnsxq_jetpack-browser-action\",\"woop-noopscoopsnsxq_jetpack-browser-action\"],\"dirtyAreaCache\":[\"nav-bar\",\"toolbar-menubar\",\"TabsToolbar\",\"PersonalToolbar\"],\"currentVersion\":16,\"newElementCount\":3}");
  user_pref("browser.uidensity", 1);
  user_pref("browser.urlbar.placeholderName", "Google");
  user_pref("browser.urlbar.suggest.bookmark", false);
  user_pref("browser.urlbar.suggest.openpage", false);
  user_pref("datareporting.healthreport.uploadEnabled", false);
  user_pref("dom.forms.autocomplete.formautofill", true);
  user_pref("extensions.activeThemeID", "default-theme@mozilla.org");
  user_pref("extensions.incognito.migrated", true);
  user_pref("extensions.lastAppBuildId", "20200120145402");
  user_pref("extensions.lastAppVersion", "72.0.2");
  user_pref("extensions.lastPlatformVersion", "72.0.2");
  user_pref("extensions.pendingOperations", false);
  user_pref("extensions.systemAddonSet", "{\"schema\":1,\"addons\":{}}");
  user_pref("extensions.ui.dictionary.hidden", true);
  user_pref("extensions.ui.locale.hidden", true);
  user_pref("extensions.webcompat.perform_injections", true);
  user_pref("extensions.webcompat.perform_ua_overrides", true);
  user_pref("general.smoothScroll", false);
  user_pref("media.peerconnection.ice.default_address_only", true);
  user_pref("media.peerconnection.ice.no_host", true);
  user_pref("media.videocontrols.picture-in-picture.video-toggle.enabled", false);
  user_pref("network.dns.disablePrefetch", true);
  user_pref("network.http.speculative-parallel-limit", 0);
  user_pref("network.predictor.cleaned-up", true);
  user_pref("network.predictor.enabled", false);
  user_pref("network.prefetch-next", false);
  user_pref("pdfjs.enabledCache.state", false);
  user_pref("pdfjs.previousHandler.alwaysAskBeforeHandling", true);
  user_pref("pdfjs.previousHandler.preferredAction", 4);
  user_pref("privacy.donottrackheader.enabled", true);
  user_pref("privacy.sanitize.pending", "[]");
  user_pref("privacy.trackingprotection.enabled", true);
  user_pref("privacy.trackingprotection.socialtracking.enabled", true);
  user_pref("services.sync.engine.addresses.available", false);
  user_pref("toolkit.legacyUserProfileCustomizations.stylesheets", true);
  user_pref("toolkit.telemetry.reportingpolicy.firstRun", false);
#+end_src

** Ad blocker configuration (=adblock.txt=)
As reiterated above, this file is not actually automatically applied. It is meant for uBlock Origin. It is not exported because of its length. Suffice to say, it's pretty exhaustive.
#+begin_src text :tangle (expand-file-name "adblock.txt" (getenv "FFDIR"))
  {
    "timeStamp": 1576571108014,
    "version": "1.24.2",
    "userSettings": {
      "advancedUserEnabled": true,
      "alwaysDetachLogger": true,
      "autoUpdate": true,
      "cloudStorageEnabled": false,
      "collapseBlocked": true,
      "colorBlindFriendly": false,
      "contextMenuEnabled": true,
      "dynamicFilteringEnabled": true,
      "externalLists": "https://bitbucket.org/nicktabick/adblock-rules/raw/master/nt-adblock.txt\nhttps://dl.dropboxusercontent.com/s/1ybzw9lb7m1qiyl/AAs.txt\nhttps://easylist-downloads.adblockplus.org/adwarefilters.txt\nhttps://easylist-downloads.adblockplus.org/fanboy-annoyance.txt\nhttps://easylist-downloads.adblockplus.org/fanboy-social.txt\nhttps://easylist-downloads.adblockplus.org/fb_annoyances_full.txt\nhttps://easylist-downloads.adblockplus.org/fb_annoyances_newsfeed.txt\nhttps://easylist-downloads.adblockplus.org/fb_annoyances_sidebar.txt\nhttps://easylist-downloads.adblockplus.org/message_seen_remover_for_facebook.txt\nhttps://easylist-downloads.adblockplus.org/yt_annoyances_other.txt\nhttps://easylist-downloads.adblockplus.org/yt_annoyances_suggestions.txt\nhttps://fanboy.co.nz/enhancedstats.txt\nhttps://fanboy.co.nz/fanboy-cookiemonster.txt\nhttps://fanboy.co.nz/fanboy-problematic-sites.txt\nhttps://fanboy.co.nz/r/fanboy-complete.txt\nhttps://fanboy.co.nz/r/fanboy-ultimate.txt\nhttps://raw.githubusercontent.com/Akamaru/Adblock-Filterliste/master/filterlist.txt\nhttps://raw.githubusercontent.com/DandelionSprout/adfilt/master/Alternate%20versions%20Anti-Malware%20List/AntiMalwareABP.txt\nhttps://raw.githubusercontent.com/DandelionSprout/adfilt/master/Alternate%20versions%20Anti-Malware%20List/AntiMalwareAdGuardHome.txt\nhttps://raw.githubusercontent.com/DandelionSprout/adfilt/master/AncientLibrary/Facebook%20Privacy%20List.txt\nhttps://raw.githubusercontent.com/DandelionSprout/adfilt/master/Android%20Scum%20Class%20—%20Fake%20notification%20counters.txt\nhttps://raw.githubusercontent.com/DandelionSprout/adfilt/master/Anti-'Notification%20pre-prompt%20banners'%20List.txt\nhttps://raw.githubusercontent.com/DandelionSprout/adfilt/master/AntiAmazonListForTwitch.txt\nhttps://raw.githubusercontent.com/DandelionSprout/adfilt/master/BrowseWebsitesWithoutLoggingIn.txt\nhttps://raw.githubusercontent.com/DandelionSprout/adfilt/master/I%20Don't%20Want%20to%20Download%20Your%20Browser.txt\nhttps://raw.githubusercontent.com/DandelionSprout/adfilt/master/KnowYourMemePureBrowsingExperience.txt\nhttps://raw.githubusercontent.com/DandelionSprout/adfilt/master/SocialShareList.txt\nhttps://raw.githubusercontent.com/DandelionSprout/adfilt/master/TwitchPureViewingExperience.txt\nhttps://raw.githubusercontent.com/DandelionSprout/adfilt/master/WikiaPureBrowsingExperience.txt\nhttps://raw.githubusercontent.com/Hubird-au/Adversity/master/Antisocial.txt\nhttps://raw.githubusercontent.com/Hubird-au/Adversity/master/Extreme-Measures.txt\nhttps://raw.githubusercontent.com/LordBadmintonofYorkshire/Overlay-Blocker/master/blocklist.txt\nhttps://raw.githubusercontent.com/Manu1400/i-don-t-care-about-gotoup-btns/master/list-gotoup-btns.txt\nhttps://raw.githubusercontent.com/NeeEoo/AdBlockNeeEoo/master/List.txt\nhttps://raw.githubusercontent.com/Rpsl/adblock-leadgenerator-list/master/list/list.txt\nhttps://raw.githubusercontent.com/Strappazzon/filterlists/master/Filterlists/Tracking.txt\nhttps://raw.githubusercontent.com/bcye/Hello-Goodbye/master/filterlist.txt\nhttps://raw.githubusercontent.com/callmenemo491/DodgySiteBlocker/master/DodgySiteBlocker.txt\nhttps://raw.githubusercontent.com/cb-software/CB-Malicious-Domains/master/block_lists/adblock_plus.txt\nhttps://raw.githubusercontent.com/cpeterso/clickbait-blocklist/master/clickbait-blocklist.txt\nhttps://raw.githubusercontent.com/dariusworks/superblock/master/cleanersitesAiO.txt\nhttps://raw.githubusercontent.com/endolith/clickbait/master/clickbait.txt\nhttps://raw.githubusercontent.com/gasull/adblock-nsa/master/filters.txt\nhttps://raw.githubusercontent.com/hoshsadiq/adblock-nocoin-list/master/nocoin.txt\nhttps://raw.githubusercontent.com/jasonbarone/membership-app-block-list/master/membership-app-block-list.txt\nhttps://raw.githubusercontent.com/kbinani/adblock-wikipedia/master/signed.txt\nhttps://raw.githubusercontent.com/kbinani/adblock-youtube-ads/master/signed.txt\nhttps://raw.githubusercontent.com/lassekongo83/Frellwits-filter-lists/master/i-dont-want-your-app.txt\nhttps://raw.githubusercontent.com/piperun/iploggerfilter/master/filterlist\nhttps://raw.githubusercontent.com/reek/anti-adblock-killer/master/anti-adblock-killer-filters.txt\nhttps://raw.githubusercontent.com/ryanbr/fanboy-adblock/master/fake-news.txt\nhttps://raw.githubusercontent.com/yourduskquibbles/webannoyances/master/filters/newsletter_filters.txt\nhttps://www.i-dont-care-about-cookies.eu/abp/\nhttps://filters.adtidy.org/extension/ublock/filters/1.txt",
      "firewallPaneMinimized": false,
      "hyperlinkAuditingDisabled": true,
      "ignoreGenericCosmeticFilters": false,
      "largeMediaSize": 50,
      "parseAllABPHideFilters": true,
      "prefetchingDisabled": true,
      "requestLogMaxEntries": 1000,
      "showIconBadge": true,
      "tooltipsDisabled": false,
      "webrtcIPAddressHidden": true
    },
    "selectedFilterLists": [
      "https://filters.adtidy.org/extension/ublock/filters/1.txt",
      "user-filters",
      "ublock-filters",
      "ublock-annoyances",
      "ublock-badware",
      "ublock-experimental",
      "ublock-privacy",
      "ublock-abuse",
      "ublock-unbreak",
      "awrl-0",
      "adguard-generic",
      "adguard-mobile",
      "easylist",
      "adguard-spyware",
      "easyprivacy",
      "fanboy-enhanced",
      "disconnect-malvertising",
      "malware-0",
      "malware-1",
      "spam404-0",
      "adguard-annoyance",
      "adguard-social",
      "fanboy-thirdparty_social",
      "fanboy-cookiemonster",
      "fanboy-annoyance",
      "fanboy-social",
      "dpollock-0",
      "hphosts",
      "mvps-0",
      "plowe-0",
      "ara-0",
      "BGR-0",
      "CHN-1",
      "CHN-0",
      "CZE-0",
      "DEU-0",
      "EST-0",
      "FIN-0",
      "FRA-0",
      "GRC-0",
      "HUN-0",
      "IDN-0",
      "IRN-0",
      "ISL-0",
      "ISR-0",
      "ITA-1",
      "ITA-0",
      "JPN-1",
      "KOR-0",
      "KOR-1",
      "LTU-0",
      "LVA-0",
      "NLD-0",
      "NOR-0",
      "POL-0",
      "POL-2",
      "ROU-1",
      "RUS-2",
      "RUS-0",
      "spa-1",
      "spa-0",
      "SVN-0",
      "SWE-1",
      "THA-0",
      "TUR-0",
      "VIE-1",
      "https://raw.githubusercontent.com/DandelionSprout/adfilt/master/KnowYourMemePureBrowsingExperience.txt",
      "https://raw.githubusercontent.com/DandelionSprout/adfilt/master/WikiaPureBrowsingExperience.txt",
      "https://raw.githubusercontent.com/DandelionSprout/adfilt/master/SocialShareList.txt",
      "https://raw.githubusercontent.com/DandelionSprout/adfilt/master/Alternate%20versions%20Anti-Malware%20List/AntiMalwareABP.txt",
      "https://raw.githubusercontent.com/DandelionSprout/adfilt/master/Alternate%20versions%20Anti-Malware%20List/AntiMalwareAdGuardHome.txt",
      "https://raw.githubusercontent.com/DandelionSprout/adfilt/master/TwitchPureViewingExperience.txt",
      "https://raw.githubusercontent.com/DandelionSprout/adfilt/master/AntiAmazonListForTwitch.txt",
      "https://raw.githubusercontent.com/DandelionSprout/adfilt/master/Anti-'Notification%20pre-prompt%20banners'%20List.txt",
      "https://raw.githubusercontent.com/DandelionSprout/adfilt/master/I%20Don't%20Want%20to%20Download%20Your%20Browser.txt",
      "https://raw.githubusercontent.com/DandelionSprout/adfilt/master/Android%20Scum%20Class%20—%20Fake%20notification%20counters.txt",
      "https://raw.githubusercontent.com/DandelionSprout/adfilt/master/BrowseWebsitesWithoutLoggingIn.txt",
      "https://raw.githubusercontent.com/reek/anti-adblock-killer/master/anti-adblock-killer-filters.txt",
      "https://raw.githubusercontent.com/gasull/adblock-nsa/master/filters.txt",
      "https://raw.githubusercontent.com/kbinani/adblock-wikipedia/master/signed.txt",
      "https://raw.githubusercontent.com/kbinani/adblock-youtube-ads/master/signed.txt",
      "https://dl.dropboxusercontent.com/s/1ybzw9lb7m1qiyl/AAs.txt",
      "https://easylist-downloads.adblockplus.org/adwarefilters.txt",
      "https://raw.githubusercontent.com/Akamaru/Adblock-Filterliste/master/filterlist.txt",
      "https://raw.githubusercontent.com/Hubird-au/Adversity/master/Antisocial.txt",
      "https://raw.githubusercontent.com/dariusworks/superblock/master/cleanersitesAiO.txt",
      "https://raw.githubusercontent.com/cb-software/CB-Malicious-Domains/master/block_lists/adblock_plus.txt",
      "https://raw.githubusercontent.com/cpeterso/clickbait-blocklist/master/clickbait-blocklist.txt",
      "https://raw.githubusercontent.com/endolith/clickbait/master/clickbait.txt",
      "https://raw.githubusercontent.com/callmenemo491/DodgySiteBlocker/master/DodgySiteBlocker.txt",
      "https://raw.githubusercontent.com/Hubird-au/Adversity/master/Extreme-Measures.txt",
      "https://easylist-downloads.adblockplus.org/fb_annoyances_full.txt",
      "https://easylist-downloads.adblockplus.org/fb_annoyances_newsfeed.txt",
      "https://raw.githubusercontent.com/DandelionSprout/adfilt/master/AncientLibrary/Facebook%20Privacy%20List.txt",
      "https://easylist-downloads.adblockplus.org/fb_annoyances_sidebar.txt",
      "https://raw.githubusercontent.com/ryanbr/fanboy-adblock/master/fake-news.txt",
      "https://easylist-downloads.adblockplus.org/fanboy-annoyance.txt",
      "https://fanboy.co.nz/fanboy-cookiemonster.txt",
      "https://fanboy.co.nz/enhancedstats.txt",
      "https://fanboy.co.nz/fanboy-problematic-sites.txt",
      "https://easylist-downloads.adblockplus.org/fanboy-social.txt",
      "https://fanboy.co.nz/r/fanboy-complete.txt",
      "https://fanboy.co.nz/r/fanboy-ultimate.txt",
      "https://raw.githubusercontent.com/bcye/Hello-Goodbye/master/filterlist.txt",
      "https://www.i-dont-care-about-cookies.eu/abp/",
      "https://raw.githubusercontent.com/Manu1400/i-don-t-care-about-gotoup-btns/master/list-gotoup-btns.txt",
      "https://raw.githubusercontent.com/lassekongo83/Frellwits-filter-lists/master/i-dont-want-your-app.txt",
      "https://raw.githubusercontent.com/Rpsl/adblock-leadgenerator-list/master/list/list.txt",
      "https://raw.githubusercontent.com/jasonbarone/membership-app-block-list/master/membership-app-block-list.txt",
      "https://easylist-downloads.adblockplus.org/message_seen_remover_for_facebook.txt",
      "https://raw.githubusercontent.com/NeeEoo/AdBlockNeeEoo/master/List.txt",
      "https://raw.githubusercontent.com/hoshsadiq/adblock-nocoin-list/master/nocoin.txt",
      "https://bitbucket.org/nicktabick/adblock-rules/raw/master/nt-adblock.txt",
      "https://raw.githubusercontent.com/LordBadmintonofYorkshire/Overlay-Blocker/master/blocklist.txt",
      "https://raw.githubusercontent.com/piperun/iploggerfilter/master/filterlist",
      "https://raw.githubusercontent.com/Strappazzon/filterlists/master/Filterlists/Tracking.txt",
      "https://raw.githubusercontent.com/yourduskquibbles/webannoyances/master/filters/newsletter_filters.txt",
      "https://easylist-downloads.adblockplus.org/yt_annoyances_other.txt",
      "https://easylist-downloads.adblockplus.org/yt_annoyances_suggestions.txt"
    ],
    "hiddenSettings": {
      "allowGenericProceduralFilters": false,
      "assetFetchTimeout": 30,
      "autoCommentFilterTemplate": "{{date}} {{origin}}",
      "autoUpdateAssetFetchPeriod": 120,
      "autoUpdateDelayAfterLaunch": 180,
      "autoUpdatePeriod": 7,
      "blockingProfiles": "11111/#F00 11011/#C0F 11001/#00F 00001",
      "cacheStorageAPI": "unset",
      "cacheStorageCompression": true,
      "cacheControlForFirefox1376932": "no-cache, no-store, must-revalidate",
      "consoleLogLevel": "unset",
      "debugScriptlets": false,
      "debugScriptletInjector": false,
      "disableWebAssembly": false,
      "extensionUpdateForceReload": false,
      "ignoreRedirectFilters": false,
      "ignoreScriptInjectFilters": false,
      "filterAuthorMode": false,
      "loggerPopupType": "popup",
      "manualUpdateAssetFetchPeriod": 500,
      "popupFontSize": "unset",
      "requestJournalProcessPeriod": 1000,
      "selfieAfter": 3,
      "strictBlockingBypassDuration": 120,
      "suspendTabsUntilReady": "unset",
      "updateAssetBypassBrowserCache": false,
      "userResourcesLocation": "unset"
    },
    "whitelist": [
      "about-scheme",
      "annualcreditreport.transunion.com",
      "chrome-extension-scheme",
      "chrome-scheme",
      "melpa.org",
      "opera-scheme",
      "vivaldi-scheme",
      "www.netteller.com",
      "wyciwyg-scheme"
    ],
    "netWhitelist": "about-scheme\nannualcreditreport.transunion.com\nchrome-extension-scheme\nchrome-scheme\nmelpa.org\nopera-scheme\nvivaldi-scheme\nwww.netteller.com\nwyciwyg-scheme",
    "dynamicFilteringString": "",
    "urlFilteringString": "",
    "hostnameSwitchesString": "no-csp-reports: * true",
    "userFilters": "! 7/29/2019 https://www.facebook.com\nwww.facebook.com##div.f_1j0s8guc1h.pagelet:nth-of-type(2) > ._1-ia > ._4-u8._20os._2tyk._1-ib._4-u2\n\n! 9/18/2019 https://www.youtube.com\nwww.youtube.com##ytd-button-renderer.size-default.style-default.force-icon-button.ytd-menu-renderer.style-scope:nth-of-type(1)\nwww.youtube.com##ytd-button-renderer.size-default.style-default.force-icon-button.ytd-menu-renderer.style-scope:nth-of-type(2)\n"
  }
#+end_src
